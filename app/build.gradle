buildscript {

    repositories {
        mavenCentral()
    }
}

def config = rootProject.ext
def plugins = config.Plugins
def libs = config.Libraries

apply plugin: plugins.android_app
apply plugin: plugins.kotlin
apply plugin: plugins.kotlin_kapt
apply plugin: plugins.kotlin_ext
apply plugin: plugins.junit5

apply from: "$rootDir/config/config.gradle", to: config

android {
    def versions = config.Versions
    def appConfig = config.AppConfig

    compileSdkVersion versions.compileSdk

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk

        applicationId appConfig.id
        versionCode appConfig.versionCode
        versionName appConfig.versionName

        testInstrumentationRunner libs.test_runner_android
        // use runnerBuilder from mannodermaus
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"

        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release_keystore {
            storeFile file(config.keystore_file)
            storePassword config.keystore_password
            keyAlias config.keystore_key
            keyPassword config.key_password
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix appConfig.debugSuffix
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        htmlReport true
        abortOnError false
        warningsAsErrors true
    }
    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    packagingOptions {
        exclude "META-INF/LICENSE*"
        exclude "META-INF/atomicfu.kotlin_module"
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation libs.kotlin
    implementation libs.kotlin_ktx

    // testing
    androidTestImplementation libs.test_espresso

    testImplementation libs.test_junit_jupiter
    testImplementation libs.test_junit_params
    testRuntimeOnly libs.test_junit_engine
    androidTestImplementation libs.test_runner

    // Android Support
    implementation libs.androidx_appCompat
    implementation libs.androidx_annotations
    implementation libs.androidx_constraintLayout

    // Pixplicity Prefs
    implementation libs.easyPrefs

    implementation libs.timber
}